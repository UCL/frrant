# Generated by Django 3.2 on 2023-01-05 16:06

from django.db import migrations, models

def add_antiquarian_m2m_relations_to_bibliography_items(apps,schema_editor):
    '''
    Translating Generic ForeignKey on BibliographyItems to ManyToMany on Antiquarians
    In a migration, we don't have acces to class methods, and GFK properties are all methods
    So all we have to play with are BibliographyItem.content_type and .object_id (not parent)
    As BibliographyItems have never been linked to any other content types, we can safely
    assume all object_ids refer to Antiquarians.
    '''
    BibliographyItem = apps.get_model("research","BibliographyItem")
    Antiquarian = apps.get_model("research","Antiquarian")
    antiquarians = Antiquarian.objects.all()
    # Each BibliographyItem has one Antiquarian, so loop BibliographyItems and write each one
    #   to the appropriate Antiquarian's M2M field
    for b in BibliographyItem.objects.all():
        a = antiquarians.get(pk=b.object_id)
        a.bibliography_items.add(b)
        a.save()

class Migration(migrations.Migration):

    dependencies = [
        ('research', '0062_definite_possible_clarity'),
    ]

    operations = [
        migrations.AddField(
            model_name='antiquarian',
            name='bibliography_items',
            field=models.ManyToManyField(blank=True, related_name='antiquarians', to='research.BibliographyItem'),
        ),
        migrations.AddField(
            model_name='citingauthor',
            name='bibliography_items',
            field=models.ManyToManyField(blank=True, related_name='citing_authors', to='research.BibliographyItem'),
        ),
        migrations.RunPython(add_antiquarian_m2m_relations_to_bibliography_items),
    ]
