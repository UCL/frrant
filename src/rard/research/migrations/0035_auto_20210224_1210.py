# Generated by Django 3.1 on 2021-02-24 12:10

from django.db import migrations, models
from django.utils.text import capfirst


data_cache = {}


YEAR_RANGE = 'range'
YEAR_BEFORE = 'before'
YEAR_AFTER = 'after'
YEAR_SINGLE = 'single'


def store_date_strings(apps, schema_editor):
    # get all the models we need to back up
    Antiquarian = apps.get_model("research", "Antiquarian")
    Book = apps.get_model("research", "Book")
    Work = apps.get_model("research", "Work")
    HistoricalAntiquarian = apps.get_model("research", "HistoricalAntiquarian")
    HistoricalBook = apps.get_model("research", "HistoricalBook")
    HistoricalWork = apps.get_model("research", "HistoricalWork")

    def _bcad(year):
        # format year as BC or AD
        try:
            if year < 0:
                return '{} BC'.format(abs(year))
            else:
                return '{} AD'.format(abs(year))
        except TypeError:
            return ''

    def display_date_range(obj, prepend=None):
        if not obj.year_type:
            return ''

        if isinstance(obj, Antiquarian):
            prepend = capfirst(obj.dates_type or '')

        if obj.year_type == YEAR_RANGE:
            if obj.year1 * obj.year2 < 0:
                # they are of different sides of zero AD
                # so show BC or AD on both
                display_year1 = _bcad(obj.year1)
            else:
                display_year1 = str(abs(obj.year1))

            if obj.circa1:
                display_year1 = 'c. ' + display_year1

            display_year2 = _bcad(obj.year2)

            if obj.circa2:
                display_year2 = 'c. ' + display_year2

            info = ' to '.join([display_year1, display_year2])
            return (
                '{} from {}'.format(prepend, info) if prepend
                else 'From {}'.format(info)
            )
        else:
            if obj.year_type == YEAR_SINGLE:
                stub = ''
            else:
                stub = obj.get_year_type_display()
                if prepend:
                    stub = stub.lower()

            circa1 = 'c. ' if obj.circa1 else ''
            info = '{} {}{}'.format(
                stub,
                circa1,
                _bcad(obj.year1)
            ).strip()

            return '{} {}'.format(prepend, info) if prepend else info

    for model in [Antiquarian, Book, Work, HistoricalAntiquarian,
                  HistoricalBook, HistoricalWork]:
        model_name = model.__name__
        data_cache.setdefault(model_name, {})
        for a in model.objects.all():
            data_cache[model_name][a.pk] = display_date_range(a)

    print('we have cache as follows:')
    print(data_cache)

def apply_date_strings(apps, schema_editor):
    Antiquarian = apps.get_model("research", "Antiquarian")
    Book = apps.get_model("research", "Book")
    Work = apps.get_model("research", "Work")
    HistoricalAntiquarian = apps.get_model("research", "HistoricalAntiquarian")
    HistoricalBook = apps.get_model("research", "HistoricalBook")
    HistoricalWork = apps.get_model("research", "HistoricalWork")

    for model in [Antiquarian, Book, Work, HistoricalAntiquarian,
                  HistoricalBook, HistoricalWork]:
        instances = data_cache.get(model.__name__)
        for pk, date_range in instances.items():
            obj = model.objects.get(pk=pk)
            obj.date_range = date_range
            obj.save()


class Migration(migrations.Migration):

    dependencies = [
        ('research', '0034_auto_20210216_1037'),
    ]

    operations = [
        migrations.RunPython(store_date_strings, migrations.RunPython.noop),
        migrations.RenameField(
            model_name='antiquarian',
            old_name='year1',
            new_name='order_year',
        ),
        migrations.RenameField(
            model_name='book',
            old_name='year1',
            new_name='order_year',
        ),
        migrations.RenameField(
            model_name='historicalantiquarian',
            old_name='year1',
            new_name='order_year',
        ),
        migrations.RenameField(
            model_name='historicalbook',
            old_name='year1',
            new_name='order_year',
        ),
        migrations.RenameField(
            model_name='historicalwork',
            old_name='year1',
            new_name='order_year',
        ),
        migrations.RenameField(
            model_name='work',
            old_name='year1',
            new_name='order_year',
        ),
        migrations.RemoveField(
            model_name='antiquarian',
            name='circa1',
        ),
        migrations.RemoveField(
            model_name='antiquarian',
            name='circa2',
        ),
        migrations.RemoveField(
            model_name='antiquarian',
            name='dates_type',
        ),
        migrations.RemoveField(
            model_name='antiquarian',
            name='year2',
        ),
        migrations.RemoveField(
            model_name='antiquarian',
            name='year_type',
        ),
        migrations.RemoveField(
            model_name='book',
            name='circa1',
        ),
        migrations.RemoveField(
            model_name='book',
            name='circa2',
        ),
        migrations.RemoveField(
            model_name='book',
            name='year2',
        ),
        migrations.RemoveField(
            model_name='book',
            name='year_type',
        ),
        migrations.RemoveField(
            model_name='historicalantiquarian',
            name='circa1',
        ),
        migrations.RemoveField(
            model_name='historicalantiquarian',
            name='circa2',
        ),
        migrations.RemoveField(
            model_name='historicalantiquarian',
            name='dates_type',
        ),
        migrations.RemoveField(
            model_name='historicalantiquarian',
            name='year2',
        ),
        migrations.RemoveField(
            model_name='historicalantiquarian',
            name='year_type',
        ),
        migrations.RemoveField(
            model_name='historicalbook',
            name='circa1',
        ),
        migrations.RemoveField(
            model_name='historicalbook',
            name='circa2',
        ),
        migrations.RemoveField(
            model_name='historicalbook',
            name='year2',
        ),
        migrations.RemoveField(
            model_name='historicalbook',
            name='year_type',
        ),
        migrations.RemoveField(
            model_name='historicalwork',
            name='circa1',
        ),
        migrations.RemoveField(
            model_name='historicalwork',
            name='circa2',
        ),
        migrations.RemoveField(
            model_name='historicalwork',
            name='year2',
        ),
        migrations.RemoveField(
            model_name='historicalwork',
            name='year_type',
        ),
        migrations.RemoveField(
            model_name='work',
            name='circa1',
        ),
        migrations.RemoveField(
            model_name='work',
            name='circa2',
        ),
        migrations.RemoveField(
            model_name='work',
            name='year2',
        ),
        migrations.RemoveField(
            model_name='work',
            name='year_type',
        ),
        migrations.AddField(
            model_name='antiquarian',
            name='date_range',
            field=models.CharField(blank=True, default='', max_length=256),
        ),
        migrations.AddField(
            model_name='book',
            name='date_range',
            field=models.CharField(blank=True, default='', max_length=256),
        ),
        migrations.AddField(
            model_name='historicalantiquarian',
            name='date_range',
            field=models.CharField(blank=True, default='', max_length=256),
        ),
        migrations.AddField(
            model_name='historicalbook',
            name='date_range',
            field=models.CharField(blank=True, default='', max_length=256),
        ),
        migrations.AddField(
            model_name='historicalwork',
            name='date_range',
            field=models.CharField(blank=True, default='', max_length=256),
        ),
        migrations.AddField(
            model_name='work',
            name='date_range',
            field=models.CharField(blank=True, default='', max_length=256),
        ),
        migrations.RunPython(apply_date_strings, migrations.RunPython.noop),
    ]
