# Generated by Django 3.2 on 2023-01-23 11:20

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("research", "0060_add_reference_model"),
    ]

    def create_unknown_work(apps, schema_editor):
        Antiquarian = apps.get_model("research", "Antiquarian")
        Work = apps.get_model("research", "Work")

        antiquarians = Antiquarian.objects.all()
        for ant in antiquarians:
            ant.works.add(Work.objects.create(name="Unknown Work", unknown=True))

    def create_unknown_book(apps, schema_editor):
        Work = apps.get_model("research", "Work")
        works = Work.objects.all()
        for work in works:
            work.book_set.create(subtitle="Unknown Book", unknown=True)

    def assign_links_to_unknown(apps, schema_editor):
        worklinks = ["FragmentLink", "TestimoniumLink", "AppositumFragmentLink"]

        for link_type in worklinks:
            link_class = apps.get_model("research", link_type)
            links = link_class.objects.all()
            for link in links:
                print(link)
                ant = link.antiquarian
                if link.work == None:
                    link.work = ant.works.get(unknown=True)
                    print(ant.works.get(unknown=True))
                work = link.work
                if link.book == None:
                    link.book = work.book_set.get(unknown=True)
                link.save()

    def give_books_order(apps, schema_editor):
        Work = apps.get_model("research", "Work")
        for work in Work.objects.all():
            books = work.book_set.all().order_by("number", "-unknown")
            for count, book in enumerate(books):
                book.order = count
                book.save()

    def give_links_order_in_book(apps, schema_editor):
        worklinks = ["FragmentLink", "TestimoniumLink", "AppositumFragmentLink"]

        Work = apps.get_model("research", "Work")

        def order_in_book_for_link_class(link_classname):
            link_class = apps.get_model("research", link_classname)
            for work in Work.objects.all():
                related_links = link_class.objects.filter(work=work).order_by(
                    "work_order"
                )
                for count, link in enumerate(related_links):
                    link.order_in_book = count
                    link.save()

        for link in worklinks:
            order_in_book_for_link_class(link)

    operations = [
        migrations.AlterModelOptions(
            name="book",
            options={"ordering": ["order"]},
        ),
        migrations.AddField(
            model_name="historicalbook",
            name="unknown",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="historicalwork",
            name="unknown",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="work",
            name="unknown",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="book",
            name="unknown",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="appositumfragmentlink",
            name="order_in_book",
            field=models.PositiveIntegerField(blank=True, default=None, null=True),
        ),
        migrations.AddField(
            model_name="book",
            name="order",
            field=models.PositiveIntegerField(blank=True, default=None, null=True),
        ),
        migrations.AddField(
            model_name="fragmentlink",
            name="order_in_book",
            field=models.PositiveIntegerField(blank=True, default=None, null=True),
        ),
        migrations.AddField(
            model_name="historicalbook",
            name="order",
            field=models.PositiveIntegerField(blank=True, default=None, null=True),
        ),
        migrations.AddField(
            model_name="testimoniumlink",
            name="order_in_book",
            field=models.PositiveIntegerField(blank=True, default=None, null=True),
        ),
        migrations.RunPython(create_unknown_work),
        migrations.RunPython(create_unknown_book),
        migrations.RunPython(assign_links_to_unknown),
        migrations.RunPython(give_books_order),
        migrations.RunPython(give_links_order_in_book),
    ]
