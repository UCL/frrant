# Generated by Django 3.2 on 2023-01-23 11:20

from django.db import migrations, models
import itertools


class Migration(migrations.Migration):

    dependencies = [
        ("research", "0060_add_reference_model"),
    ]

    def create_unknown_work(apps, schema_editor):
        Antiquarian = apps.get_model("research", "Antiquarian")
        Work = apps.get_model("research", "Work")

        antiquarians = Antiquarian.objects.all()
        for ant in antiquarians:
            ant.works.add(Work.objects.create(name="Unknown Work", unknown=True))

    def create_unknown_book(apps, schema_editor):
        Work = apps.get_model("research", "Work")
        works = Work.objects.all()
        for work in works:
            work.book_set.create(subtitle="Unknown Book", unknown=True)

    def assign_links_to_unknown(apps, schema_editor):
        worklinks = ["FragmentLink", "TestimoniumLink", "AppositumFragmentLink"]

        for link_type in worklinks:
            link_class = apps.get_model("research", link_type)
            links = link_class.objects.all()
            for link in links:
                ant = link.antiquarian
                if link.work is None:
                    link.work = ant.works.get(unknown=True)
                work = link.work
                if link.book is None:
                    link.book = work.book_set.get(unknown=True)
                link.save()

    def give_books_order(apps, schema_editor):
        Work = apps.get_model("research", "Work")
        for work in Work.objects.all():
            books = work.book_set.all().order_by("unknown", "number")
            for count, book in enumerate(books):
                book.order = count
                book.save()

    def give_links_order_in_book(apps, schema_editor):
        worklinks = ["FragmentLink", "TestimoniumLink", "AppositumFragmentLink"]

        Work = apps.get_model("research", "Work")

        def order_in_book_for_link_class(link_classname):
            link_class = apps.get_model("research", link_classname)
            for work in Work.objects.all():
                related_links = link_class.objects.filter(work=work).order_by(
                    "work_order"
                )
                for count, link in enumerate(related_links):
                    link.order_in_book = count
                    link.save()

        for link in worklinks:
            order_in_book_for_link_class(link)

    def reindex_work_by_book(apps, schema_editor):
        """Update order of links with respect to work, taking into account book__order and order_in_book"""

        worklinks = ["FragmentLink", "TestimoniumLink", "AppositumFragmentLink"]

        Work = apps.get_model("research", "Work")

        def reindex_fragment_and_testimonium_links(antiquarian):
            to_reorder = [
                antiquarian.fragmentlinks.all()
                .order_by(
                    "work__worklink__order",
                    "work_order",
                    "book__order",
                    "order_in_book",
                )
                .distinct(),
                # We want testimonium links without works to be ordered first
                # but for some reason adding "-work__isnull" to the order_by
                # breaks the rest of the ordering. Using itertools chain as
                # a workaround does the job.
                itertools.chain(
                    antiquarian.testimoniumlinks.all()
                    .filter(work__isnull=True)
                    .distinct(),
                    antiquarian.testimoniumlinks.all()
                    .filter(work__isnull=False)
                    .order_by(
                        "work__worklink__order",
                        "work_order",
                        "book__order",
                        "order_in_book",
                    )
                    .distinct(),
                ),
                antiquarian.appositumfragmentlinks.all()
                .order_by(
                    "work__worklink__order",
                    "work_order",
                    "book__order",
                    "order_in_book",
                )
                .distinct(),
            ]

            for qs in to_reorder:
                for count, link in enumerate(qs):
                    if link.order != count:
                        link.order = count
                        link.save()

        # parent function
        for work in Work.objects.all():
            for link_class in worklinks:
                link = apps.get_model("research", link_class)

                to_reorder = (
                    link.objects.filter(work=work)
                    .order_by("book__order", "order_in_book")
                    .distinct()
                )

                for count, link in enumerate(to_reorder):
                    if link.book.work.unknown == True:
                        link.work_order = link.order_in_book
                        link.save()
                    else:
                        if link.work_order != count:
                            link.work_order = count
                            link.save()
                    reindex_fragment_and_testimonium_links(link.antiquarian)

    operations = [
        migrations.AlterModelOptions(
            name="book",
            options={"ordering": ["order"]},
        ),
        migrations.AddField(
            model_name="historicalbook",
            name="unknown",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="historicalwork",
            name="unknown",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="work",
            name="unknown",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="book",
            name="unknown",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="appositumfragmentlink",
            name="order_in_book",
            field=models.PositiveIntegerField(blank=True, default=None, null=True),
        ),
        migrations.AddField(
            model_name="book",
            name="order",
            field=models.PositiveIntegerField(blank=True, default=None, null=True),
        ),
        migrations.AddField(
            model_name="fragmentlink",
            name="order_in_book",
            field=models.PositiveIntegerField(blank=True, default=None, null=True),
        ),
        migrations.AddField(
            model_name="historicalbook",
            name="order",
            field=models.PositiveIntegerField(blank=True, default=None, null=True),
        ),
        migrations.AddField(
            model_name="testimoniumlink",
            name="order_in_book",
            field=models.PositiveIntegerField(blank=True, default=None, null=True),
        ),
        migrations.RunPython(create_unknown_work),
        migrations.RunPython(create_unknown_book),
        migrations.RunPython(assign_links_to_unknown),
        migrations.RunPython(give_books_order),
        migrations.RunPython(give_links_order_in_book),
        migrations.RunPython(reindex_work_by_book),
    ]
