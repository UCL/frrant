# Generated by Django 3.2 on 2022-09-19 08:37

from django.db import migrations, models

def move_bibliography_item_to_objects(apps,schema_editor):
    '''
    Moving from GenericKey to ManyToMany
    In a migration, we don't have acces to class methods, and GR properties are all methods
    So all we have to play with are BibliographyItem.content_type and .object_id (not parent)
    As BibliographyItems have never been linked to anything else, we can ignore .content_type
    '''
    BibliographyItem = apps.get_model("research","BibliographyItem")
    Antiquarian = apps.get_model("research","Antiquarian")
    antiquarians = Antiquarian.objects.all()
    # Each BibliographyItem has one Antiquarian, so loop BibliographyItems and write each one
    #   to the appropriate Antiquarian's M2M field
    for b in BibliographyItem.objects.all():
        a = antiquarians.get(pk=b.object_id)
        a.bibliography_items2.add(b)
        a.save()


class Migration(migrations.Migration):
    '''
    The migration will happen in 2 steps, the first (this one) will not delete any data,
    so no reverse method is needed in the RunPython()
    The second step will remove the genericRelation in Antiquarian and in BibliographyItem and rename 
    bibliography_items2 to bibliography_items
    Reason for 2 migrations is that Postgres handles migrations in one transaction and 
    prevents updates with table changes pending 
    '''
    dependencies = [
        ('research', '0060_add_reference_model'),
    ]

    operations = [
        migrations.AddField(
            model_name='antiquarian',
            name='bibliography_items2',
            field=models.ManyToManyField(blank=True, related_query_name='biblography_items2', to='research.BibliographyItem'),
        ),
        migrations.RunPython(move_bibliography_item_to_objects),
    ]
